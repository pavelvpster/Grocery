<?xml version="1.0" encoding="utf-8"?>
<ruleset xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="pmd"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 http://pmd.sourceforge.net/ruleset_2_0_0.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">
    <exclude-pattern>.*/target/.*</exclude-pattern>

    <description>Java PMD ruleset</description>

    <!-- Basic -->
    <rule ref="category/java/errorprone.xml/EmptyIfStmt">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/EmptyWhileStmt">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/EmptyTryBlock">
        <priority>1</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/EmptyFinallyBlock">
        <priority>1</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/EmptySwitchStatements">
        <priority>1</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/JumbledIncrementer">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/codestyle.xml/ForLoopShouldBeWhileLoop"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryConversionTemporary">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/multithreading.xml/DoubleCheckedLocking"/>
    <rule ref="category/java/errorprone.xml/ReturnFromFinallyBlock"/>
    <rule ref="category/java/errorprone.xml/EmptySynchronizedBlock"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryReturn"/>
    <rule ref="category/java/errorprone.xml/EmptyInitializer"/>
    <rule ref="category/java/errorprone.xml/UnconditionalIfStatement"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryModifier"/>
    <rule ref="category/java/design.xml/CollapsibleIfStatements">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/design.xml/UselessOverridingMethod"/>
    <rule ref="category/java/errorprone.xml/ClassCastExceptionWithToArray">
        <priority>1</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor"/>
    <rule ref="category/java/errorprone.xml/UselessOperationOnImmutable"/>
    <rule ref="category/java/errorprone.xml/MisplacedNullCheck"/>
    <rule ref="category/java/errorprone.xml/UnusedNullCheckInEquals">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/multithreading.xml/AvoidThreadGroup"/>
    <rule ref="category/java/errorprone.xml/BrokenNullCheck"/>
    <rule ref="category/java/errorprone.xml/AvoidUsingOctalValues"/>
    <rule ref="category/java/bestpractices.xml/AvoidUsingHardCodedIP"/>
    <rule ref="category/java/bestpractices.xml/CheckResultSet"/>
    <rule ref="category/java/errorprone.xml/AvoidMultipleUnaryOperators"/>
    <rule ref="category/java/multithreading.xml/DontCallThreadRun"/>


    <!-- Clone Implementation -->
    <rule ref="category/java/errorprone.xml/ProperCloneImplementation"/>
    <rule ref="category/java/errorprone.xml/CloneMethodMustImplementCloneable"/>


    <!-- Code size -->
    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <priority>2</priority>
        <properties>
            <property name="minimum" value="16"/>
        </properties>
    </rule>


    <!-- Controversial -->
    <rule ref="category/java/codestyle.xml/UnnecessaryConstructor">
        <priority>3</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/DontImportSun">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/AvoidAccessibilityAlteration"/>


    <!-- Coupling -->
    <rule ref="category/java/design.xml/CouplingBetweenObjects"/>
    <rule ref="category/java/bestpractices.xml/LooseCoupling">
        <priority>2</priority>
    </rule>


    <!-- Design -->
    <rule ref="category/java/design.xml/SimplifyBooleanReturns"/>
    <rule ref="category/java/design.xml/SimplifyBooleanExpressions"/>
    <rule ref="category/java/design.xml/AvoidDeeplyNestedIfStmts"/>
    <rule ref="category/java/bestpractices.xml/AvoidReassigningParameters"/>
    <rule ref="category/java/design.xml/SwitchDensity"/>
    <rule ref="category/java/errorprone.xml/ConstructorCallsOverridableMethod"/>
    <rule ref="category/java/design.xml/FinalFieldCouldBeStatic">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/CloseResource"/>
    <rule ref="category/java/errorprone.xml/NonStaticInitializer">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/bestpractices.xml/DefaultLabelNotLastInSwitchStmt"/>
    <rule ref="category/java/errorprone.xml/NonCaseLabelInSwitchStatement">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/ComparisonWithNaN"/>
    <rule ref="category/java/errorprone.xml/InstantiationToGetClass"/>
    <rule ref="category/java/errorprone.xml/IdempotentOperations">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/UseLocaleWithCaseConversions">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/AssignmentToNonFinalStatic">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel"/>
    <rule ref="category/java/errorprone.xml/ImplicitSwitchFallThrough"/>
    <rule ref="category/java/multithreading.xml/UseNotifyAllInsteadOfNotify"/>
    <rule ref="category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause"/>
    <rule ref="category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod"/>
    <rule ref="category/java/design.xml/SimplifyConditional"/>
    <rule ref="category/java/errorprone.xml/CompareObjectsWithEquals"/>
    <rule ref="category/java/codestyle.xml/UnnecessaryLocalBeforeReturn"/>
    <rule ref="category/java/multithreading.xml/NonThreadSafeSingleton"/>
    <rule ref="category/java/bestpractices.xml/PreserveStackTrace">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/bestpractices.xml/UseCollectionIsEmpty">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal"/>
    <rule ref="category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract"/>
    <rule ref="category/java/design.xml/SingularField"/>
    <rule ref="category/java/design.xml/AbstractClassWithoutAnyMethod"/>
    <rule ref="category/java/performance.xml/TooFewBranchesForASwitchStatement">
        <priority>3</priority>
    </rule>


    <!-- Finalizers -->
    <rule ref="category/java/errorprone.xml/EmptyFinalizer"/>
    <rule ref="category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize"/>
    <rule ref="category/java/errorprone.xml/FinalizeOverloaded"/>
    <rule ref="category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize"/>
    <rule ref="category/java/errorprone.xml/FinalizeShouldBeProtected"/>
    <rule ref="category/java/errorprone.xml/AvoidCallingFinalize"/>


    <!-- Beans -->
    <rule ref="category/java/errorprone.xml/MissingSerialVersionUID"/>


    <!-- jUnit -->
    <rule ref="category/java/errorprone.xml/JUnitStaticSuite"/>
    <rule ref="category/java/errorprone.xml/JUnitSpelling"/>
    <rule ref="category/java/bestpractices.xml/JUnitTestsShouldIncludeAssert"/>

    <rule ref="category/java/errorprone.xml/TestClassWithoutTestCases">
        <priority>3</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/UnnecessaryBooleanAssertion"/>


    <!-- Logging -->
    <rule ref="category/java/errorprone.xml/MoreThanOneLogger"/>
    <rule ref="category/java/bestpractices.xml/SystemPrintln"/>
    <rule ref="category/java/bestpractices.xml/AvoidPrintStackTrace">
        <priority>2</priority>
    </rule>

    <rule ref="category/java/errorprone.xml/ProperLogger">
        <priority>2</priority>
    </rule>


    <!-- Migrating -->
    <rule ref="category/java/bestpractices.xml/ReplaceVectorWithList"/>
    <rule ref="category/java/bestpractices.xml/ReplaceHashtableWithMap"/>
    <rule ref="category/java/bestpractices.xml/ReplaceEnumerationWithIterator"/>
    <rule ref="category/java/errorprone.xml/AvoidAssertAsIdentifier"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseBeforeAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseAfterAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4TestShouldUseTestAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation"/>
    <rule ref="category/java/bestpractices.xml/JUnitUseExpected"/>


    <!-- Naming -->
    <rule ref="category/java/codestyle.xml/ShortMethodName">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/codestyle.xml/MethodNamingConventions"/>
    <rule ref="category/java/codestyle.xml/ClassNamingConventions"/>
    <rule ref="category/java/codestyle.xml/AvoidDollarSigns"/>
    <rule ref="category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass"/>
    <rule ref="category/java/errorprone.xml/SuspiciousHashcodeMethodName"/>
    <rule ref="category/java/errorprone.xml/SuspiciousEqualsMethodName"/>
    <rule ref="category/java/errorprone.xml/AvoidFieldNameMatchingTypeName"/>
    <rule ref="category/java/codestyle.xml/NoPackage">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/codestyle.xml/BooleanGetMethodName"/>


    <!-- Optimization -->
    <rule ref="category/java/performance.xml/UseStringBufferForStringAppends"/>
    <rule ref="category/java/performance.xml/UseArraysAsList"/>
    <rule ref="category/java/performance.xml/AvoidArrayLoops"/>
    <rule ref="category/java/performance.xml/AddEmptyString"/>


    <!-- Strict exceptions -->
    <rule ref="category/java/design.xml/ExceptionAsFlowControl">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/errorprone.xml/AvoidCatchingNPE"/>
    <rule ref="category/java/design.xml/AvoidThrowingRawExceptionTypes"/>
    <rule ref="category/java/design.xml/AvoidThrowingNullPointerException"/>
    <rule ref="category/java/design.xml/AvoidRethrowingException">
        <priority>2</priority>
    </rule>
    <rule ref="category/java/design.xml/DoNotExtendJavaLangError"/>
    <rule ref="category/java/errorprone.xml/DoNotThrowExceptionInFinally"/>
    <rule ref="category/java/design.xml/AvoidThrowingNewInstanceOfSameException"/>
    <rule ref="category/java/design.xml/AvoidCatchingGenericException"/>
    <rule ref="category/java/errorprone.xml/AvoidLosingExceptionInformation"/>


    <!-- Strings -->
    <rule ref="category/java/errorprone.xml/AvoidDuplicateLiterals"/>
    <rule ref="category/java/performance.xml/StringInstantiation"/>
    <rule ref="category/java/performance.xml/StringToString"/>
    <rule ref="category/java/performance.xml/InefficientStringBuffering"/>
    <rule ref="category/java/errorprone.xml/UnnecessaryCaseChange"/>
    <rule ref="category/java/performance.xml/UseStringBufferLength"/>
    <rule ref="category/java/performance.xml/AppendCharacterWithChar"/>
    <rule ref="category/java/performance.xml/ConsecutiveLiteralAppends"/>
    <rule ref="category/java/performance.xml/UseIndexOfChar"/>
    <rule ref="category/java/performance.xml/InefficientEmptyStringCheck"/>
    <rule ref="category/java/performance.xml/InsufficientStringBufferDeclaration">
        <priority>4</priority>
    </rule>
    <rule ref="category/java/performance.xml/UselessStringValueOf"/>
    <rule ref="category/java/errorprone.xml/StringBufferInstantiationWithChar"/>
    <rule ref="category/java/errorprone.xml/UseEqualsToCompareStrings"/>
    <rule ref="category/java/bestpractices.xml/AvoidStringBufferField"/>


    <!-- Sun Security Guidelines -->
    <rule ref="category/java/bestpractices.xml/MethodReturnsInternalArray"/>
    <rule ref="category/java/bestpractices.xml/ArrayIsStoredDirectly"/>


    <!-- Unused Code -->
    <rule ref="category/java/bestpractices.xml/UnusedPrivateField"/>
    <rule ref="category/java/bestpractices.xml/UnusedLocalVariable"/>
    <rule ref="category/java/bestpractices.xml/UnusedPrivateMethod"/>
    <rule ref="category/java/bestpractices.xml/UnusedFormalParameter"/>

</ruleset>
